{
  "hash": "ece2f371708b08a14cc1a1c229f406e2",
  "result": {
    "markdown": "---\ntitle: \"Coordinate systems and axes\"\nauthor: \"Jinwon Lee\"\ndate: \"2023-03-29\"\ncategories: [Visualization, Code, R]\npage-layout: full\nimage: \"coord_polar.png\"\noutput:\n  prettydoc::html_pretty:\n    theme: architect\n    highlight: github\neditor_options: \n  chunk_output_type: console\nmainfont: NanumGothic\n---\n\n\n\n\n# 3. Coordinate systems and axes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read csv File\nncdc_normals <- read.csv(\"../data/ncdc_normals.csv\")\n\n# station_loc Dataframe 생성\nstation_loc <- data.frame(\n    station_id = c(\"USW00014819\", \"USC00042319\", \"USW00093107\", \"USW00012918\"),\n    location = c(\"Chicago\", \"Death Valley\", \"San Diego\", \"Houston\")\n)\nstation_loc\n#>    station_id     location\n#> 1 USW00014819      Chicago\n#> 2 USC00042319 Death Valley\n#> 3 USW00093107    San Diego\n#> 4 USW00012918      Houston\n\n# Raw Data와 Inner Join\ntemps_long <- ncdc_normals %>% inner_join(station_loc, by = \"station_id\")\ntemps_long %>% head()\n#>    station_id month day temperature flag       date     location\n#> 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#> 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#> 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#> 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#> 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#> 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\ntemps_long %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\" \n#>    location \n#> \"character\"\n\n# Date Type Convert : Character -> Date\ntemps_long$date <- temps_long$date %>% as.Date(\"%Y-%m-%d\")\n```\n:::\n\n\n## Figure 3.2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arrange multiple plots into a grid\nlibrary(cowplot) # plot_grid()\n\n# data_Houston 데이터프레임 생성\ndata_Houston <- temps_long %>% filter(location == \"Houston\")\ndata_Houston %>% head()\n#>    station_id month day temperature flag       date location\n#> 1 USW00012918     1   1        53.9    S 0000-01-01  Houston\n#> 2 USW00012918     1   2        53.8    S 0000-01-02  Houston\n#> 3 USW00012918     1   3        53.8    S 0000-01-03  Houston\n#> 4 USW00012918     1   4        53.8    S 0000-01-04  Houston\n#> 5 USW00012918     1   5        53.8    S 0000-01-05  Houston\n#> 6 USW00012918     1   6        53.7    S 0000-01-06  Houston\n\nggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\")\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# X축에 표시할 눈금\ndate_s <- \"0000-01-01\" %>% as.Date(\"%Y-%m-%d\")\ndate_e <- \"0001-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date <- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\n\n# ggplot + 축 생성\ntemp_plot <- ggplot(data_Houston, aes(x = date, y = temperature)) +\n    geom_line(linewidth = 1, color = \"royalblue\") +\n    scale_x_date(\n        name = \"month\", breaks = break_date,\n        labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\")\n    ) +\n    scale_y_continuous(name = \"temp\") + # limits = c(0, 100) -> y 범위 지정\n    # labs(title = 'Fig. 2.3', subtitle = 'Daily temperature normals') +\n    theme_light()\ntemp_plot\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2 subplots\nplot_ab <- plot_grid(temp_plot, temp_plot,\n    nrow = 1, rel_widths = c(1, 2), labels = c(\"a\", \"b\")\n)\nplot_ab\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3 subplots\nplot_abc <- plot_grid(plot_ab, temp_plot,\n    ncol = 1, rel_widths = c(1, 5, 1), labels = c(\"\", \"c\")\n)\nplot_abc\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Figure 3.5 ~ 3.6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel) # geom_text_repel()\n\n# Read csv File\nUs_census <- read.csv(\"../data/US_census.csv\")\nUs_census %>% head(2)\n#>     state           name FIPS pop2010 pop2000 age_under_5 age_under_18\n#> 1 Alabama Autauga County 1001   54571   43671         6.6         26.8\n#> 2 Alabama Baldwin County 1003  182265  140415         6.1         23.0\n#>   age_over_65 female white black native asian pac_isl two_plus_races hispanic\n#> 1        12.0   51.3  78.5  17.7    0.4   0.9      NA            1.6      2.4\n#> 2        16.8   51.1  85.7   9.4    0.7   0.7      NA            1.5      4.4\n#>   white_not_hispanic no_move_in_one_plus_year foreign_born\n#> 1               77.2                     86.3          2.0\n#> 2               83.5                     83.0          3.6\n#>   foreign_spoken_at_home hs_grad bachelors veterans mean_work_travel\n#> 1                    3.7    85.3      21.7     5817             25.1\n#> 2                    5.5    87.6      26.8    20396             25.8\n#>   housing_units home_ownership housing_multi_unit median_val_owner_occupied\n#> 1         22135           77.5                7.2                    133900\n#> 2        104061           76.7               22.6                    177200\n#>   households persons_per_household per_capita_income median_household_income\n#> 1      19718                   2.7             24568                   53255\n#> 2      69476                   2.5             26469                   50147\n#>   poverty private_nonfarm_establishments private_nonfarm_employment\n#> 1    10.6                            877                      10628\n#> 2    12.2                           4812                      52233\n#>   percent_change_private_nonfarm_employment nonemployment_establishments firms\n#> 1                                      16.6                         2971  4067\n#> 2                                      17.4                        14175 19035\n#>   black_owned_firms native_owned_firms asian_owned_firms pac_isl_owned_firms\n#> 1              15.2                 NA               1.3                  NA\n#> 2               2.7                0.4               1.0                  NA\n#>   hispanic_owned_firms women_owned_firms manufacturer_shipments_2007\n#> 1                  0.7              31.7                          NA\n#> 2                  1.3              27.3                     1410273\n#>   mercent_whole_sales_2007   sales sales_per_capita accommodation_food_service\n#> 1                       NA  598175            12003                      88157\n#> 2                       NA 2966489            17166                     436955\n#>   building_permits fed_spending    area density\n#> 1              191       331142  594.44    91.8\n#> 2              696      1119082 1589.78   114.6\n\ntx_counties <- Us_census %>%\n    filter(state == \"Texas\") %>% # Texas 주만 추출\n    select(name, pop2010) %>% # name과 pop2010 열만 추출\n    mutate(\n        county = gsub(\" County\", \"\", name), # \" County\" 제거하여 county 열 생성\n        popratio = pop2010 / median(pop2010)\n    ) %>% # pop2010을 중앙값으로 나누어 비율 생성\n    arrange(desc(popratio)) %>% # 내림차순으로 정렬\n    mutate(\n        index = 1:n(), # index 열 생성\n        label = ifelse(index <= 3 | index > n() - 3 | runif(n()) < .04, county, \"\")\n    )\n# index 기준으로 상위 3위와 하위 3위인 열만 label을 지정\ntx_counties %>% head()\n#>             name pop2010  county  popratio index   label\n#> 1  Harris County 4092459  Harris 222.64616     1  Harris\n#> 2  Dallas County 2368139  Dallas 128.83624     2  Dallas\n#> 3 Tarrant County 1809034 Tarrant  98.41869     3 Tarrant\n#> 4   Bexar County 1714773   Bexar  93.29052     4        \n#> 5  Travis County 1024266  Travis  55.72417     5        \n#> 6 El Paso County  800647 El Paso  43.55840     6\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Figure 3.6\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Figure 3.5\nlabel_log10 <- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(tx_counties, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 0, linetype = 2, color = \"grey40\") + # 수평선 생성 (yintercept : y절편)\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0, # label을 표시하기 위해 연결해야하는 최소한의 선분 길이\n        max.overlaps = 100\n    ) + # label 간의 최대 겹침 횟수\n    scale_y_log10(\n        name = \"population number / median\",\n        breaks = 10^(-2:2),\n        labels = label_log10\n    ) +\n    scale_x_continuous(\n        name = \"Texas counties, from most to leas populous\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n#> Warning: Transformation introduced infinite values in continuous y-axis\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 예제 - 시군구 인구수 2023년\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_202202 <- read.csv(\"../data/행정구역_시군구_별_주민등록세대수_202302.csv\", encoding = \"UTF-8\")\ndata_202202 %>% head()\n#>   행정구역.시군구.별 X2022.11 X2022.12 X2023.01 X2023.02\n#> 1             종로구    72666    72524    72479    72773\n#> 2               중구    63167    63139    63123    63492\n#> 3             용산구   109905   109805   109734   109778\n#> 4             성동구   133435   133305   133293   133517\n#> 5             광진구   169376   169291   169416   169648\n#> 6           동대문구   170154   169873   169716   170766\n\nkor_census <- data_202202 %>%\n    filter(X2023.02 > 0) %>%\n    mutate(popratio = X2023.02 / median(X2023.02)) %>%\n    arrange(popratio %>% desc()) %>%\n    mutate(index = 1:n(), label = ifelse(index <= 5 | index > n() - 5 | index == median(index), 행정구역.시군구.별, \"\"))\n\nlabel_log10 <- sapply(-2:2, function(i) as.expression(bquote(10^.(i))))\n\nggplot(kor_census, aes(x = index, y = popratio)) +\n    geom_hline(yintercept = 1, linetype = 2, color = \"grey40\") +\n    geom_point(size = 1, color = \"royalblue\") +\n    geom_text_repel(aes(label = label),\n        min.segment.length = 0,\n        max.overlaps = 100\n    ) +\n    scale_y_log10(\n        name = \"인구 수 / 중위 수\",\n        breaks = 10^(-2:2),\n        labels = label_log10,\n        limits = c(10^-1.3, 10^1.3)\n    ) +\n    scale_x_discrete(\n        name = \"행정구역(시군구)별 주민등록세대수\",\n        breaks = NULL\n    ) +\n    theme_light() +\n    theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Figure 3.10\n\n::: {.cell}\n\n```{.r .cell-code}\n# X축에 표시할 눈금\ndate_s <- \"0000-01-01\" %>% as.Date(\"%Y-%m-%d\")\ndate_e <- \"0001-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date <- seq.Date(date_s, date_e, by = \"3 month\") # 3달 간격 Date 생성\ndata_lab <- format(break_date, \"%B\")\n\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"month\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"temperature\", limits = c(0, 105)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    # coord_polar(theta = \"x\", start = 0, direction = 1) +    # 12시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 예제 - 기상청 자료 2022년\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read csv File\ndata_2022 <- read.csv(\"../data/OBS_ASOS_DD_20230322080932.csv\", fileEncoding = \"CP949\")\n\n# '대전', '서울', '세종', '제주'만 추출\ndata_2022 <- data_2022 %>% filter(지점명 %in% c(\"대전\", \"서울\", \"세종\", \"제주\"))\ndata_2022$지점명 %>% unique()\n#> [1] \"서울\" \"대전\" \"제주\" \"세종\"\n\n# Date Type Convert : Character -> Date\ndata_2022$일시 <- data_2022$일시 %>% as.Date(\"%Y-%m-%d\")\ndata_2022 %>% sapply(class)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n# X축 눈금 지정\ndate_s <- \"2022-01-01\" %>% as.Date(\"%Y-%m-%d\")\ndate_e <- \"2023-01-01\" %>% as.Date(\"%Y-%m-%d\")\nbreak_date <- seq.Date(date_s, date_e, by = \"2 month\") # 2달 간격 Date 생성\ndata_lab <- format(break_date, \"%B\")\n\nggplot(data_2022, aes(x = 일시, y = 평균기온..C., color = 지점명)) +\n    geom_line(linewidth = 1.2) +\n    scale_x_date(name = \"월\", breaks = break_date, labels = data_lab) +\n    scale_y_continuous(name = \"평균기온\", limits = c(-20, 30)) +\n    coord_polar(theta = \"x\", start = pi, direction = -1) + # 6시 위치에서 반시계 방향\n    theme_light() +\n    theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](Coordinate_systems_and_axes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "Coordinate_systems_and_axes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}